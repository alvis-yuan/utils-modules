set nocompatible              " be iMproved

"encoding
set encoding=utf-8
set langmenu=zh_CN.UTF-8
language message zh_CN.UTF-8
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1 


set rtp+=~/.vim/bundle/vundle
call vundle#rc()
Bundle 'gmarik/vundle'
Bundle 'bash-support.vim'
"Bundle 'c.vim'
Bundle 'grep.vim'
"Bundle 'minibufexpl.vim'
Bundle 'https://github.com/vim-scripts/winmanager.git'
Bundle 'https://github.com/vim-scripts/taglist.vim'
Bundle 'https://github.com/mbbill/code_complete.git'
Bundle 'https://github.com/scrooloose/nerdtree.git'
Bundle 'https://github.com/Valloric/YouCompleteMe.git'
Bundle 'https://github.com/scrooloose/syntastic.git'
Bundle 'https://github.com/vim-scripts/L9.git'
Bundle 'https://github.com/vim-scripts/FuzzyFinder.git'
Bundle 'https://github.com/vim-scripts/lookupfile.git'
Bundle 'https://github.com/vim-scripts/genutils.git'
Bundle 'https://github.com/plasticboy/vim-markdown.git'
Bundle 'https://github.com/vim-scripts/DoxygenToolkit.vim.git'

filetype plugin indent on

"filetype plugin on

filetype on
set nu

syntax enable
syntax on
set hlsearch
set noignorecase
set incsearch
set showmode

set showmatch
set smartindent

set whichwrap+=h,l

"<> same as () and so on use % match
set mps+=<:>

colorscheme evening

"format
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set autoindent
set cindent

"backup
set nobackup
set noswapfile

set linebreak " 整词换行

" record last position
if has("autocmd")
    au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | 
endif


"status column
set statusline=%<%F\ %-14.(lines:%L/%l,\ column:%c%V%)\ %h%m%r%=%k[%{(&fenc==\"\")?&enc:&fenc}%{(&bomb?\",BOM\":\"\")}]\ %P
set laststatus=2 

"mouse
"set mouse=a

" map
nmap <space> <c-d>
map <c-s> <ESC>:w<CR>

"tags
"set tags+=~/.tags/syscomplete.tags "system header file tags for code_complete plugin auto complete
set tags+=~/.tags/sysheadersforycm.tags "tags for read by ycm
set tags+=~/.tags/prjtags "current project tags
set autochdir
map <silent> <F5> :!ctags -R --extra=+f --c-kinds=+px --fields=+ztKS `pwd`;mv tags ~/.tags/prjtags<CR><CR>
"set tags+=`pwd`/tags "current directory tags
"cscope
cs add ~/.tags/cscope.out
nmap <C-@>s :cs find s <C-R>=expand("<cword>")<CR><CR>:copen<CR>
nmap <C-@>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>c :cs find c <C-R>=expand("<cword>")<CR><CR>:copen<CR>
nmap <C-@>t :cs find t <C-R>=expand("<cword>")<CR><CR>:copen<CR>
nmap <C-@>e :cs find e <C-R>=expand("<cword>")<CR><CR>:copen<CR>
nmap <C-@>f :cs find f <C-R>=expand("<cfile>")<CR><CR>:copen<CR>
nmap <C-@>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>:copen<CR>
" 查找本字符串
"6 或 e 查找本 egrep 模式
"7 或 f 查找本文件
"8 或 i 查找包含本文件的文件
if has("cscope")
    set cscopequickfix=s-,c-,d-,i-,t-,e-
    set csto=0
    set cst
    set csverb
endif


"NERDTree
map <F3> :NERDTreeMirror<CR>
map <F3> :NERDTreeToggle<CR>
let NERDTreeIgnore=['\~$', 'a.out', 'core', '.o$[[file]]']

"taglist config
let Tlist_Process_File_Always=1 "always resolve file tags
let Tlist_Show_One_File = 1         "只显示当前文件的taglist，默认是显示多个
let Tlist_Exit_OnlyWindow = 1          "如果taglist是最后一个窗口，则退出vim
let Tlist_Use_Right_Window = 0         "在右侧窗口中显示taglist
let Tlist_GainFocus_On_ToggleOpen = 1  "打开taglist时，光标保留在taglist窗口
let Tlist_Ctags_Cmd='/usr/bin/ctags'  "设置ctags命令的位置
nnoremap <F4> :Tlist<CR>        "设置关闭和打开taglist窗口的快捷键
if &filetype == 'c'
    let Tlist_Auto_Open=1
endif

"winmanager
let g:AutoOpenWinManager=1
"let g:winManagerWindowLayout=TagsExplorer|FileExplorer


"syntastic 
let g:syntastic_error_symbol = "✗"
let g:syntastic_warning_symbol = "!" 
"whether to show balloons
let g:syntastic_enable_balloons = 1
let g:syntastic_always_populate_loc_list = 1

"ycm
let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
"let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_confirm_extra_conf = 0
let g:ycm_always_populate_location_list = 1
let g:ycm_min_num_of_chars_for_completion = 1
let g:ycm_complete_in_comments = 1
set completeopt=menu

nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>
nnoremap <leader>lo :lopen<CR>

"开启光亮光标行 
"set cursorline

" save and resume view
au BufWinLeave * silent mkview
au BufWinEnter * silent loadview


" execute project related configuration in current directory
"if filereadable("project.vim")
"    source project.vim
"endif

set path+=/usr/include/**,/var/nginx-0.1.0/objs,,/var/nginx-0.1.0/src/**


